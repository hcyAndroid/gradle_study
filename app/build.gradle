//apply plugin: 'com.android.application'
//
//apply plugin: 'kotlin-android'
//
//apply plugin: 'kotlin-android-extensions'
//DSL 应用插件
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}
apply from: "../config.gradle"


android {
    compileSdkVersion "android-29"
    dataBinding{
        enabled=true
    }
    //配置签名信息
    signingConfigs {

        htjy_test_release {
            storeFile file("../htjy")  //签名证书文件
            storePassword 'education123' //签名证书文件的密码
            keyAlias '宏途教育' //密钥别名
            keyPassword 'education123'//密钥的密码
        }
    }
    defaultConfig {
        applicationId tag1//指定app的包名
        minSdkVersion 23 //指定app最低支持的android版本
        targetSdkVersion 29
        versionCode getAppVersionCodeFromGit()       //内部版本号
        versionName getAppVersionNameFromGit()//app的版本名称-一般指主版本号+副版本号+补丁号android["versionName"]
        testApplicationId "com.hcy.myproject.test" //配置测试app的包名
        //Instrument测试
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //  //版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了
        flavorDimensions "versionCode"
    }
    //配置adb操作选项
    adbOptions {
        //设置adb连接的超时时间
        timeOutInMs = 5 * 1000  //5秒
        installOptions '-r', '-s'
    }
    //lint
    lintOptions {
        //用于lint发现错误时是否退出gradle 构建
        abortOnError true
        //用于配置错误的输出是否应该显示绝对路径
        absolutePaths true
        //检查所有警告包括哪些默认被关闭的问题
        checkAllWarnings true
        //warningAsErrors true
        check 'NewApi'
        //
        htmlOutput new File("${buildDir}/lintResports/lint-result.html")
        //忽略警告
        ignoreWarnings true
    }
    //配置dex选项
    dexOptions {
        //是否启用dex增量模式，默认不启用，虽然速度快但有限制，可能会导致不工作,慎启
        incremental false
        //执行dx命令分配的最大内存，主要解决GC overhead问题,默认只有1g
        javaMaxHeapSize '4g'
        //函数>65535 需强制启动jumbo模式，才能构建成功
        jumboMode true
        //运行dx命令时使用的线程数量
        threadCount 3
        //配置是否执行dex Libraries 库工程，开启会提高构建速度，但影响clean，默认true
        preDexLibraries true
    }
    //配置java编译选项
    compileOptions {
        //配置源文件编码
        encoding = "utf-8"
        //配置java源代码的编译级别
        sourceCompatibility = JavaVersion.VERSION_1_8
        //配置成功java字节码的版本
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    //配置构建的类型
    buildTypes {
        release {
            debuggable false   //不可调试，表象log打不出来
            jniDebuggable false //不可调试jni
            minifyEnabled true //启用混淆
            shrinkResources true //自动清理未使用的资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexEnabled true //启用自动拆分多个Dex的功能，主要用于处理>65535的方法
            applicationIdSuffix '.release' //包名后缀
            zipAlignEnabled true //打开一个zipalign工具，整理和优化apk文件的工具，提高系统和应用的运行效率，更快的读写apk中的资源，降低内存的使用
            signingConfig signingConfigs.htjy_test_release  //配置默认的签名信息
        }
        debug {
            debuggable true  //可调试，log可见
            minifyEnabled true //不启用混淆
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true //自动清理未使用的资源，这是使用必须要打开混淆
            jniDebuggable true //可调试jni
            multiDexEnabled true //启用自动拆分多个Dex的功能，主要用于处理>65535的方法
            zipAlignEnabled true //打开一个zipalign工具，整理和优化apk文件的工具，提高系统和应用的运行效率，更快的读写apk中的资源，降低内存的使用
            applicationIdSuffix '.debug' //包名后缀
        }
    }
    //批量修改生成的apk的文件名
    applicationVariants.all { variant ->
        println("打印1111>>>${variant.buildType.name}")
        variant.outputs.all {
            outputFileName = "${variant.versionCode}_hcy2019_${variant.flavorName}_${variant.versionName}_${buildTime()}.apk"
//            if (output.outputFile != null&&output.outputFile.name.endsWith('.apk')) {
//                //def apk=new File(output.outputFile.getParent(),"hcy2019.apk")
//                //output.outputFile=apk
//
//                println("打印2222>>>${output.outputFile.name}")
//            }
        }
    }
    //声明配置渠道的维度
    flavorDimensions 'company', 'version'

    //配置渠道
    productFlavors {
        htjy {
            //可以给每个渠道都设置不同的包名
            applicationId "com.hcy.myproject.htjy"
            buildConfigField "String", "TEST_URL", '"http://www.baidu.com"'
            buildConfigField "Boolean", "tag01", 'true'
            resValue "string", "product_name", "宏途教育"
            //对android库项目混淆
            consumerProguardFiles 'proguard-rules.pro', 'proguard-android.txt'
            //设置测试包名
            testApplicationId 'com.hcy.myproject.htjy.test'
            //是否为功能测试
            testFunctionalTest true
            //是否启用分析功能
            testHandleProfiling true
            //设置维度
            dimension 'company'

        }
        ygsj {
            applicationId "com.hcy.myproject.ygsj"
            testApplicationId 'com.hcy.myproject.ygsj.test'
            dimension 'company'
        }
        wyt {
            applicationId "com.hcy.myproject.wyt"
            testApplicationId 'com.hcy.myproject.wyt.test'
            dimension 'company'
        }
        ali {
            dimension 'version'
        }
    }
}
//从git中根据tag的数量跟新版本号
def getAppVersionCodeFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '--list'
        standardOutput = stdout
    }
    return stdout.toString().split("\n").size()
}
//从git中获取应用的版本名称
def getAppVersionNameFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', "--abbrev=0", "--tags"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def buildTime() {
    def date = new Date()
    return date.format("yyyy_MM_dd_HH_mm_ss")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation commonDependencies['kt']
    implementation commonDependencies['appcompatx']
    implementation commonDependencies['ktx']
    implementation project(path: ':utilslib')
    api libDependencies['constraintlayout']
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    //                                       👇 依赖当前平台所对应的平台库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'

}
